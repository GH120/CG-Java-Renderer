PontoBuffer {
	 PositionBuffer : Vec3Buffer,
	 NormalBuffer   : Vec3Buffer,
	 DistanceBuffer : DoubleBuffer
	 MaterialBuffer : IntBuffer
}


colision(Vec3Buffer p0, Vec3Buffer dr){
	
	Vec3Buffer w = p0.sub(centro.vezes(-1))
	
	Vec3Buffer a = ...
	           b
	           c
	           
	DoubleBuffer delta = b.vezes(b).menos(a.vezes(c).vezes(4))
	
	DoubleMask   mask  = delta.lanewise(VectorOperators.LT, 0)
	
	return delta

}

colision(Vec3Buffer p0, Vec3Buffer dr){
	
	Vec3Buffer w = p0.sub(centro.vezes(-1))
	
	Vec3Buffer a = ...
	           b
	           c
	           
	DoubleBuffer delta = b.vezes(b).menos(a.vezes(c).vezes(4))
	
	DoubleMask   mask  = delta.lanewiseRet(VectorOperators.LT, 0)
	
	delta.lanewise(ternary, 0, mask) //0 if delta negative
	
	delta.root()
	
	DoubleBuffer t = b.vezes(-1).sub(delta)
	
	DoubleMask   mask2  = t.lanewiseRet(VectorOperators.LT, 0)
	
	delta = delta.add(b.vezes(-1), mask2)
	
	t.lanewise(ternary, delta, mask) //0 if delta negative
	
	t.lanewise(VectorOperators.div, 2)
	
	
	Vec3Buffer posicao = p0.add(dr.vezes(t));
	
	Vec3Buffer normal  = getNormal(posicao);
	
	return new Ponto(posicao, normal, t, this.materialBuffer)

}
